/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "https://esm.sh/ethers@6.7.0";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.ts";

export interface PointsMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProduct"
      | "buyProduct"
      | "buyProductERC721"
      | "changeProductAmount"
      | "deleteProduct"
      | "emergencyWithdraw"
      | "initialize"
      | "owner"
      | "productCount"
      | "products"
      | "renounceOwnership"
      | "setTrustedSigner"
      | "signingNonce"
      | "transferOwnership"
      | "trustedSigner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "ProductAdded"
      | "ProductAmountChanged"
      | "ProductDeleted"
      | "ProductPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProduct",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProduct",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProductERC721",
    values: [BigNumberish, BigNumberish[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProductAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, AddressLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "productCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signingNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSigner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyProductERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProductAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signingNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSigner",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductAddedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    assetType: BigNumberish,
    assetAddress: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    assetType: bigint,
    assetAddress: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    assetType: bigint;
    assetAddress: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductAmountChangedEvent {
  export type InputTuple = [productId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [productId: bigint, amount: bigint];
  export interface OutputObject {
    productId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductDeletedEvent {
  export type InputTuple = [productId: BigNumberish];
  export type OutputTuple = [productId: bigint];
  export interface OutputObject {
    productId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductPurchasedEvent {
  export type InputTuple = [
    user: AddressLike,
    productId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, productId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    productId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PointsMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): PointsMarketplace;
  waitForDeployment(): Promise<this>;

  interface: PointsMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProduct: TypedContractMethod<
    [
      _assetType: BigNumberish,
      _assetAddress: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  buyProduct: TypedContractMethod<
    [
      _productId: BigNumberish,
      _amount: BigNumberish,
      _timestamp: BigNumberish,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  buyProductERC721: TypedContractMethod<
    [
      _productId: BigNumberish,
      _tokenIds: BigNumberish[],
      _timestamp: BigNumberish,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  changeProductAmount: TypedContractMethod<
    [_productId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteProduct: TypedContractMethod<
    [_productId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [
      _assetType: BigNumberish,
      _assetAddress: AddressLike,
      _tokenIds: BigNumberish[],
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_trustedSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  productCount: TypedContractMethod<[], [bigint], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        assetType: bigint;
        assetAddress: string;
        tokenId: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTrustedSigner: TypedContractMethod<
    [_newTrustedSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  signingNonce: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedSigner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProduct"
  ): TypedContractMethod<
    [
      _assetType: BigNumberish,
      _assetAddress: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyProduct"
  ): TypedContractMethod<
    [
      _productId: BigNumberish,
      _amount: BigNumberish,
      _timestamp: BigNumberish,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyProductERC721"
  ): TypedContractMethod<
    [
      _productId: BigNumberish,
      _tokenIds: BigNumberish[],
      _timestamp: BigNumberish,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeProductAmount"
  ): TypedContractMethod<
    [_productId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteProduct"
  ): TypedContractMethod<[_productId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [
      _assetType: BigNumberish,
      _assetAddress: AddressLike,
      _tokenIds: BigNumberish[],
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_trustedSigner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "productCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        assetType: bigint;
        assetAddress: string;
        tokenId: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustedSigner"
  ): TypedContractMethod<
    [_newTrustedSigner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signingNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedSigner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProductAdded"
  ): TypedContractEvent<
    ProductAddedEvent.InputTuple,
    ProductAddedEvent.OutputTuple,
    ProductAddedEvent.OutputObject
  >;
  getEvent(
    key: "ProductAmountChanged"
  ): TypedContractEvent<
    ProductAmountChangedEvent.InputTuple,
    ProductAmountChangedEvent.OutputTuple,
    ProductAmountChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProductDeleted"
  ): TypedContractEvent<
    ProductDeletedEvent.InputTuple,
    ProductDeletedEvent.OutputTuple,
    ProductDeletedEvent.OutputObject
  >;
  getEvent(
    key: "ProductPurchased"
  ): TypedContractEvent<
    ProductPurchasedEvent.InputTuple,
    ProductPurchasedEvent.OutputTuple,
    ProductPurchasedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProductAdded(uint256,uint8,address,uint256,uint256)": TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;
    ProductAdded: TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;

    "ProductAmountChanged(uint256,uint256)": TypedContractEvent<
      ProductAmountChangedEvent.InputTuple,
      ProductAmountChangedEvent.OutputTuple,
      ProductAmountChangedEvent.OutputObject
    >;
    ProductAmountChanged: TypedContractEvent<
      ProductAmountChangedEvent.InputTuple,
      ProductAmountChangedEvent.OutputTuple,
      ProductAmountChangedEvent.OutputObject
    >;

    "ProductDeleted(uint256)": TypedContractEvent<
      ProductDeletedEvent.InputTuple,
      ProductDeletedEvent.OutputTuple,
      ProductDeletedEvent.OutputObject
    >;
    ProductDeleted: TypedContractEvent<
      ProductDeletedEvent.InputTuple,
      ProductDeletedEvent.OutputTuple,
      ProductDeletedEvent.OutputObject
    >;

    "ProductPurchased(address,uint256,uint256)": TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
    ProductPurchased: TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
  };
}
